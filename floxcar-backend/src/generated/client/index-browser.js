
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  email: 'email',
  password: 'password',
  role: 'role',
  createdAt: 'createdAt'
};

exports.Prisma.VehiculeScalarFieldEnum = {
  id: 'id',
  type: 'type',
  immatriculation: 'immatriculation',
  codeParc: 'codeParc',
  description: 'description',
  statut: 'statut',
  createdAt: 'createdAt'
};

exports.Prisma.TypeDepenseScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  description: 'description',
  createdAt: 'createdAt'
};

exports.Prisma.DepenseScalarFieldEnum = {
  id: 'id',
  dateIntervention: 'dateIntervention',
  typeVehicule: 'typeVehicule',
  codeParc: 'codeParc',
  typeDepenseId: 'typeDepenseId',
  libelle: 'libelle',
  quantite: 'quantite',
  montant: 'montant',
  statut: 'statut',
  dateCreation: 'dateCreation',
  commentaireControleurFinancier: 'commentaireControleurFinancier',
  commentaireControleurGestion: 'commentaireControleurGestion',
  commentaireResponsableAdmin: 'commentaireResponsableAdmin',
  commentaireAdminGeneral: 'commentaireAdminGeneral',
  commentaireDG: 'commentaireDG',
  commentaireLogisticien: 'commentaireLogisticien',
  dateReport: 'dateReport',
  vehiculeId: 'vehiculeId',
  soumisParId: 'soumisParId',
  valideParControleurFinancierId: 'valideParControleurFinancierId',
  valideParControleurGestionId: 'valideParControleurGestionId',
  valideParResponsableAdminId: 'valideParResponsableAdminId',
  valideParAdminGeneralId: 'valideParAdminGeneralId',
  valideParDGId: 'valideParDGId'
};

exports.Prisma.CommentaireScalarFieldEnum = {
  id: 'id',
  texte: 'texte',
  auteur: 'auteur',
  date: 'date',
  depenseId: 'depenseId'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  url: 'url',
  nom: 'nom',
  depenseId: 'depenseId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Role = exports.$Enums.Role = {
  LOGISTICIEN: 'LOGISTICIEN',
  CONTROLEUR_FINANCIER: 'CONTROLEUR_FINANCIER',
  CONTROLEUR_GESTION: 'CONTROLEUR_GESTION',
  RESPONSABLE_ADMIN: 'RESPONSABLE_ADMIN',
  ADMIN_GENERAL: 'ADMIN_GENERAL',
  DG: 'DG',
  SUPER_ADMIN: 'SUPER_ADMIN'
};

exports.StatutDepense = exports.$Enums.StatutDepense = {
  BROUILLON: 'BROUILLON',
  SOUMIS: 'SOUMIS',
  REJETE_FINANCE: 'REJETE_FINANCE',
  VALIDE_FINANCE: 'VALIDE_FINANCE',
  REJETE_ADMIN: 'REJETE_ADMIN',
  VALIDE_ADMIN: 'VALIDE_ADMIN',
  TRAITE_PAR_CONTROLEUR_FINANCIER: 'TRAITE_PAR_CONTROLEUR_FINANCIER',
  TRAITE_PAR_CONTROLEUR_GESTION: 'TRAITE_PAR_CONTROLEUR_GESTION',
  TRAITE_PAR_RESPONSABLE_ADMIN: 'TRAITE_PAR_RESPONSABLE_ADMIN',
  TRAITE_PAR_ADMIN_GENERAL: 'TRAITE_PAR_ADMIN_GENERAL',
  REJETE: 'REJETE',
  TERMINE: 'TERMINE'
};

exports.Prisma.ModelName = {
  User: 'User',
  Vehicule: 'Vehicule',
  TypeDepense: 'TypeDepense',
  Depense: 'Depense',
  Commentaire: 'Commentaire',
  Document: 'Document'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
