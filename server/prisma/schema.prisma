generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  LOGISTICIEN
  FINANCE
  GESTION
  ADMIN_GENERAL
  DG
  SUPER_ADMIN
}

enum StatutDepense {
  SOUMIS
  VALIDE_FINANCE
  VALIDE_GESTION
  TERMINE
  REJETEE
}

model User {
  id                      Int                    @id @default(autoincrement())
  nom                     String
  email                   String                 @unique
  password                String
  role                    Role
  createdAt               DateTime               @default(now())

  demandesSoumises        Depense[]              @relation("SoumisPar")
  demandesFinance         Depense[]              @relation("ValideParFinance")
  demandesGestion         Depense[]              @relation("ValideParGestion")
  demandesAdmin           Depense[]              @relation("ValideParAdmin")
  demandesDg              Depense[]              @relation("ValideParDg")
  historiqueValidations   HistoriqueValidation[] @relation("ValidateurHistorique")
  notifications           Notification[]
}

model Vehicule {
  id              Int      @id @default(autoincrement())
  type            String
  immatriculation String   @unique
  codeParc        String?
  description     String?
  statut          String?  @default("ACTIF")
  createdAt       DateTime @default(now())

  depenses        Depense[]
}

model TypeDepense {
  id          Int       @id @default(autoincrement())
  nom         String    @unique
  description String?
  createdAt   DateTime  @default(now())

  depenses    Depense[]
}

model Depense {
  id                     Int           @id @default(autoincrement())
  dateIntervention       DateTime
  codeParc               String
  typeDepenseId          Int
  libelle                String
  quantite               Int?          @default(1)
  montant                Int
  statut                 StatutDepense @default(SOUMIS)
  dateCreation           DateTime      @default(now())

  commentaireFinance     String?
  commentaireGestion     String?
  commentaireAdmin       String?
  commentaireLogisticien String?
  commentaireDg          String?
  dateReport             DateTime?

  vehiculeId             Int
  vehicule               Vehicule      @relation(fields: [vehiculeId], references: [id])

  soumisParId            Int
  soumisPar              User          @relation("SoumisPar", fields: [soumisParId], references: [id])

  valideParFinanceId     Int?
  valideParFinance       User?         @relation("ValideParFinance", fields: [valideParFinanceId], references: [id])

  valideParGestionId     Int?
  valideParGestion       User?         @relation("ValideParGestion", fields: [valideParGestionId], references: [id])

  valideParAdminId       Int?
  valideParAdmin         User?         @relation("ValideParAdmin", fields: [valideParAdminId], references: [id])

  valideParDgId          Int?
  valideParDg            User?         @relation("ValideParDg", fields: [valideParDgId], references: [id])

  typeDepense            TypeDepense   @relation(fields: [typeDepenseId], references: [id])

  historiqueValidations  HistoriqueValidation[] @relation("DepenseHistorique")
  documents              Document[]
  commentaires           Commentaire[]         @relation("DepenseCommentaires")
  notifications          Notification[]
}

model HistoriqueValidation {
  id            Int      @id @default(autoincrement())
  depenseId     Int
  validateurId  Int
  role          String   // "FINANCE", "GESTION", etc.
  action        String   // "VALIDEE", "REJETEE"
  commentaire   String?
  dateAction    DateTime @default(now())

  depense       Depense  @relation("DepenseHistorique", fields: [depenseId], references: [id], onDelete: Cascade)
  validateur    User     @relation("ValidateurHistorique", fields: [validateurId], references: [id])

  @@index([depenseId])
  @@index([validateurId])
}

model Commentaire {
  id         Int      @id @default(autoincrement())
  texte      String
  auteur     String
  date       DateTime @default(now())
  depenseId  Int
  depense    Depense  @relation("DepenseCommentaires", fields: [depenseId], references: [id], onDelete: Cascade)
}

model Document {
  id         Int      @id @default(autoincrement())
  url        String
  nom        String
  depenseId  Int
  createdAt  DateTime @default(now())
  depense    Depense  @relation(fields: [depenseId], references: [id], onDelete: Cascade)
}

model Notification {
  id         Int       @id @default(autoincrement())
  userId     Int
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  type       String    // e.g. DEPENSE_VALIDEE, DEPENSE_REJETEE
  title      String?
  message    String
  depenseId  Int?
  depense    Depense?  @relation(fields: [depenseId], references: [id], onDelete: SetNull)
  readAt     DateTime?
  createdAt  DateTime  @default(now())

  @@index([userId])
  @@index([depenseId])
}